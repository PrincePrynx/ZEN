{"ast":null,"code":"var _jsxFileName = \"/Users/johndoe/Documents/Project trial/zen-app/client/src/components/MoodTracker.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import Garden from './Garden';\n// import './MoodTracker.css'; // Create this CSS file for styling\n\n// function MoodTracker() {\n//   // State to store mood entries and current mood\n//   const [mood, setMood] = useState('');\n//   const [moodEntries, setMoodEntries] = useState([]);\n\n//   // Function to handle mood input change\n//   const handleMoodChange = (event) => {\n//     setMood(event.target.value);\n//   };\n\n//   // Function to handle mood submission\n//   const handleMoodSubmit = (event) => {\n//     event.preventDefault();\n//     if (mood) {\n//       setMoodEntries([...moodEntries, mood]);\n//       setMood(''); // Clear the input after submission\n//     }\n//   };\n\n//   // Function to determine plant type based on mood\n//   const getPlantType = (mood) => {\n//     switch (mood) {\n//       case 'Happy':\n//         return 'ðŸŒ»'; // Sunflower for happy mood\n//       case 'Sad':\n//         return 'ðŸŒµ'; // Cactus for sad mood\n//       case 'Angry':\n//         return 'ðŸŒ²'; // Pine tree for angry mood\n//       case 'Calm':\n//         return 'ðŸŒ¿'; // Fern for calm mood\n//       default:\n//         return 'ðŸŒ±'; // Default plant\n//     }\n//   };\n\n//   return (\n//     <div className=\"mood-tracker\">\n//       <h2>Mood Tracker</h2>\n//       <form onSubmit={handleMoodSubmit}>\n//         <select value={mood} onChange={handleMoodChange}>\n//           <option value=\"\">Select your mood</option>\n//           <option value=\"Happy\">Happy</option>\n//           <option value=\"Sad\">Sad</option>\n//           <option value=\"Angry\">Angry</option>\n//           <option value=\"Calm\">Calm</option>\n//         </select>\n//         <button type=\"submit\">Log Mood</button>\n//       </form>\n//       <div className=\"mood-display\">\n//         <h3>Your Mood Garden</h3>\n//         <div className=\"mood-plants\">\n//           {moodEntries.map((entry, index) => (\n//             <span key={index} className=\"mood-plant\">\n//               {getPlantType(entry)}\n//             </span>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default MoodTracker;\n\nimport React, { useState } from 'react';\nimport Terminal, { LineType } from 'react-terminal-ui';\nimport './MoodTracker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MoodTracker({\n  addMood\n}) {\n  _s();\n  const [terminalLineData, setTerminalLineData] = useState([{\n    type: LineType.Output,\n    value: 'Enter your mood below:'\n  }]);\n  const handleInput = input => {\n    const newLine = {\n      type: LineType.Output,\n      value: input\n    };\n    addMood(input);\n    setTerminalLineData([...terminalLineData, newLine, {\n      type: LineType.Input,\n      prompt: '>',\n      value: ''\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-tracker\",\n    children: /*#__PURE__*/_jsxDEV(Terminal, {\n      name: \"Mood Tracker\",\n      colorMode: \"light\",\n      lineData: terminalLineData,\n      onInput: handleInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(MoodTracker, \"bJE9gsMHIa5GQHTiSA0FQxiu9po=\");\n_c = MoodTracker;\nexport default MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["React","useState","Terminal","LineType","jsxDEV","_jsxDEV","MoodTracker","addMood","_s","terminalLineData","setTerminalLineData","type","Output","value","handleInput","input","newLine","Input","prompt","className","children","name","colorMode","lineData","onInput","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/johndoe/Documents/Project trial/zen-app/client/src/components/MoodTracker.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import Garden from './Garden';\n// import './MoodTracker.css'; // Create this CSS file for styling\n\n\n// function MoodTracker() {\n//   // State to store mood entries and current mood\n//   const [mood, setMood] = useState('');\n//   const [moodEntries, setMoodEntries] = useState([]);\n\n//   // Function to handle mood input change\n//   const handleMoodChange = (event) => {\n//     setMood(event.target.value);\n//   };\n\n//   // Function to handle mood submission\n//   const handleMoodSubmit = (event) => {\n//     event.preventDefault();\n//     if (mood) {\n//       setMoodEntries([...moodEntries, mood]);\n//       setMood(''); // Clear the input after submission\n//     }\n//   };\n\n//   // Function to determine plant type based on mood\n//   const getPlantType = (mood) => {\n//     switch (mood) {\n//       case 'Happy':\n//         return 'ðŸŒ»'; // Sunflower for happy mood\n//       case 'Sad':\n//         return 'ðŸŒµ'; // Cactus for sad mood\n//       case 'Angry':\n//         return 'ðŸŒ²'; // Pine tree for angry mood\n//       case 'Calm':\n//         return 'ðŸŒ¿'; // Fern for calm mood\n//       default:\n//         return 'ðŸŒ±'; // Default plant\n//     }\n//   };\n\n//   return (\n//     <div className=\"mood-tracker\">\n//       <h2>Mood Tracker</h2>\n//       <form onSubmit={handleMoodSubmit}>\n//         <select value={mood} onChange={handleMoodChange}>\n//           <option value=\"\">Select your mood</option>\n//           <option value=\"Happy\">Happy</option>\n//           <option value=\"Sad\">Sad</option>\n//           <option value=\"Angry\">Angry</option>\n//           <option value=\"Calm\">Calm</option>\n//         </select>\n//         <button type=\"submit\">Log Mood</button>\n//       </form>\n//       <div className=\"mood-display\">\n//         <h3>Your Mood Garden</h3>\n//         <div className=\"mood-plants\">\n//           {moodEntries.map((entry, index) => (\n//             <span key={index} className=\"mood-plant\">\n//               {getPlantType(entry)}\n//             </span>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default MoodTracker;\n\nimport React, { useState } from 'react';\nimport Terminal, { LineType } from 'react-terminal-ui';\nimport './MoodTracker.css';\n\nfunction MoodTracker({ addMood }) {\n  const [terminalLineData, setTerminalLineData] = useState([\n    { type: LineType.Output, value: 'Enter your mood below:' },\n  ]);\n\n  const handleInput = (input) => {\n    const newLine = { type: LineType.Output, value: input };\n    addMood(input);\n    setTerminalLineData([...terminalLineData, newLine, { type: LineType.Input, prompt: '>', value: '' }]);\n  };\n\n  return (\n    <div className=\"mood-tracker\">\n      <Terminal name=\"Mood Tracker\" colorMode=\"light\" lineData={terminalLineData} onInput={handleInput} />\n    </div>\n  );\n}\n\nexport default MoodTracker;\n\n"],"mappings":";;AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,IAAIC,QAAQ,QAAQ,mBAAmB;AACtD,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,WAAWA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EAChC,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,CACvD;IAAEU,IAAI,EAAER,QAAQ,CAACS,MAAM;IAAEC,KAAK,EAAE;EAAyB,CAAC,CAC3D,CAAC;EAEF,MAAMC,WAAW,GAAIC,KAAK,IAAK;IAC7B,MAAMC,OAAO,GAAG;MAAEL,IAAI,EAAER,QAAQ,CAACS,MAAM;MAAEC,KAAK,EAAEE;IAAM,CAAC;IACvDR,OAAO,CAACQ,KAAK,CAAC;IACdL,mBAAmB,CAAC,CAAC,GAAGD,gBAAgB,EAAEO,OAAO,EAAE;MAAEL,IAAI,EAAER,QAAQ,CAACc,KAAK;MAAEC,MAAM,EAAE,GAAG;MAAEL,KAAK,EAAE;IAAG,CAAC,CAAC,CAAC;EACvG,CAAC;EAED,oBACER,OAAA;IAAKc,SAAS,EAAC,cAAc;IAAAC,QAAA,eAC3Bf,OAAA,CAACH,QAAQ;MAACmB,IAAI,EAAC,cAAc;MAACC,SAAS,EAAC,OAAO;MAACC,QAAQ,EAAEd,gBAAiB;MAACe,OAAO,EAAEV;IAAY;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjG,CAAC;AAEV;AAACpB,EAAA,CAhBQF,WAAW;AAAAuB,EAAA,GAAXvB,WAAW;AAkBpB,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}