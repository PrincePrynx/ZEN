{"ast":null,"code":"var _jsxFileName = \"/Users/johndoe/ZEN/FRONTEND/src/components/ThoughtsVilla.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './ThoughtsVilla.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ThoughtsVilla({\n  addThought\n}) {\n  _s();\n  const [thought, setThought] = useState('');\n  const [backgroundColor, setBackgroundColor] = useState('rgb(169, 169, 169)'); // Starting with a dull color\n  const [explosion, setExplosion] = useState(false);\n  const [buttonExplosion, setButtonExplosion] = useState(false);\n  const [showMotivation, setShowMotivation] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n  const navigate = useNavigate();\n  const motivationalMessages = [\"You are stronger than you think.\", \"Keep going, you're doing great!\", \"Believe in yourself and all that you are.\", \"This too shall pass.\", \"Your potential is endless.\"];\n  const handleThoughtChange = e => {\n    const inputText = e.target.value;\n    setThought(inputText);\n\n    // Calculate the background color based on input length\n    const inputLength = inputText.length;\n    const maxLength = 800; // Define a max length for mapping\n    const colorValue = Math.min(255, Math.floor(inputLength / maxLength * 255));\n\n    // Create a gradient from dull color to bright color\n    const newBackgroundColor = `rgb(${169 + colorValue}, ${169 + colorValue}, ${169 - colorValue})`;\n    setBackgroundColor(newBackgroundColor);\n    setShowErrorMessage(false);\n  };\n  const handleThoughtSubmit = e => {\n    e.preventDefault();\n    if (!thought.trim()) {\n      setShowErrorMessage(true);\n      return;\n    }\n\n    // Save thought to the backlog\n    addThought(thought);\n\n    // Trigger button explosion animation\n    setButtonExplosion(true);\n    setTimeout(() => {\n      setButtonExplosion(false);\n\n      // Trigger text area explosion animation\n      setExplosion(true);\n      setShowMotivation(true);\n      setTimeout(() => {\n        setExplosion(false);\n        setThought('');\n        setBackgroundColor('rgb(169, 169, 169)'); // Reset background color to dull\n\n        // Hide motivational message after a delay\n        setTimeout(() => {\n          setShowMotivation(false);\n        }, 3000);\n      }, 1000); // Adjust the duration as needed\n    }, 500); // Button explosion duration\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thoughts-villa\",\n    style: {\n      backgroundColor: backgroundColor\n    },\n    children: [!explosion && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Thoughts Villa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleThoughtSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: thought,\n        onChange: handleThoughtChange,\n        placeholder: \"Type your thoughts here...\",\n        className: `thought-input ${explosion ? 'explode' : ''}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: `submit-button ${buttonExplosion ? 'explode' : ''}`,\n        children: \"let it go\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), showErrorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: \"Please type something in before you let it go.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 28\n    }, this), showMotivation && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"motivation-message\",\n      children: motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"backlog-button\",\n      onClick: () => navigate('/backlog'),\n      children: \"View Thought Backlog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(ThoughtsVilla, \"2b1ejn9+trBlNGE8kMILC082Ub8=\", false, function () {\n  return [useNavigate];\n});\n_c = ThoughtsVilla;\nexport default ThoughtsVilla;\nvar _c;\n$RefreshReg$(_c, \"ThoughtsVilla\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","ThoughtsVilla","addThought","_s","thought","setThought","backgroundColor","setBackgroundColor","explosion","setExplosion","buttonExplosion","setButtonExplosion","showMotivation","setShowMotivation","showErrorMessage","setShowErrorMessage","navigate","motivationalMessages","handleThoughtChange","e","inputText","target","value","inputLength","length","maxLength","colorValue","Math","min","floor","newBackgroundColor","handleThoughtSubmit","preventDefault","trim","setTimeout","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","placeholder","type","random","onClick","_c","$RefreshReg$"],"sources":["/Users/johndoe/ZEN/FRONTEND/src/components/ThoughtsVilla.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './ThoughtsVilla.css';\n\nfunction ThoughtsVilla({ addThought }) {\n  const [thought, setThought] = useState('');\n  const [backgroundColor, setBackgroundColor] = useState('rgb(169, 169, 169)'); // Starting with a dull color\n  const [explosion, setExplosion] = useState(false);\n  const [buttonExplosion, setButtonExplosion] = useState(false);\n  const [showMotivation, setShowMotivation] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n  const navigate = useNavigate();\n\n  const motivationalMessages = [\n    \"You are stronger than you think.\",\n    \"Keep going, you're doing great!\",\n    \"Believe in yourself and all that you are.\",\n    \"This too shall pass.\",\n    \"Your potential is endless.\"\n  ];\n\n  const handleThoughtChange = (e) => {\n    const inputText = e.target.value;\n    setThought(inputText);\n\n    // Calculate the background color based on input length\n    const inputLength = inputText.length;\n    const maxLength = 800; // Define a max length for mapping\n    const colorValue = Math.min(255, Math.floor((inputLength / maxLength) * 255));\n\n    // Create a gradient from dull color to bright color\n    const newBackgroundColor = `rgb(${169 + colorValue}, ${169 + colorValue}, ${169 - colorValue})`;\n    setBackgroundColor(newBackgroundColor);\n    setShowErrorMessage(false);\n  };\n\n  const handleThoughtSubmit = (e) => {\n    e.preventDefault();\n    if (!thought.trim()) {\n      setShowErrorMessage(true);\n      return;\n    }\n\n    // Save thought to the backlog\n    addThought(thought);\n\n    // Trigger button explosion animation\n    setButtonExplosion(true);\n\n    setTimeout(() => {\n      setButtonExplosion(false);\n\n      // Trigger text area explosion animation\n      setExplosion(true);\n      setShowMotivation(true);\n\n      setTimeout(() => {\n        setExplosion(false);\n        setThought('');\n        setBackgroundColor('rgb(169, 169, 169)'); // Reset background color to dull\n\n        // Hide motivational message after a delay\n        setTimeout(() => {\n          setShowMotivation(false);\n        }, 3000);\n      }, 1000); // Adjust the duration as needed\n    }, 500); // Button explosion duration\n  };\n\n  return (\n    <div className=\"thoughts-villa\" style={{ backgroundColor: backgroundColor }}>\n      {!explosion && <h1>Thoughts Villa</h1>}\n      <form onSubmit={handleThoughtSubmit}>\n        <textarea\n          value={thought}\n          onChange={handleThoughtChange}\n          placeholder=\"Type your thoughts here...\"\n          className={`thought-input ${explosion ? 'explode' : ''}`}\n        ></textarea>\n        <button type=\"submit\" className={`submit-button ${buttonExplosion ? 'explode' : ''}`}>\n          let it go\n        </button>\n      </form>\n      {showErrorMessage && <p className=\"error-message\">Please type something in before you let it go.</p>}\n      {showMotivation && <p className=\"motivation-message\">{motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)]}</p>}\n      <button className=\"backlog-button\" onClick={() => navigate('/backlog')}>\n        View Thought Backlog\n      </button>\n    </div>\n  );\n}\n\nexport default ThoughtsVilla;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}