{"ast":null,"code":"var _jsxFileName = \"/Users/johndoe/ZEN/FRONTEND/src/components/ThoughtsVilla.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ThoughtsVilla.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ThoughtsVilla() {\n  _s();\n  const [thought, setThought] = useState('');\n  const [backgroundColor, setBackgroundColor] = useState('rgb(169, 169, 169)');\n  const [explosion, setExplosion] = useState(false);\n  const [warningMessage, setWarningMessage] = useState('');\n  const [motivationalMessage, setMotivationalMessage] = useState('');\n  const [thoughtsHistory, setThoughtsHistory] = useState([]);\n\n  // Load existing thoughts from localStorage when the component mounts\n  useEffect(() => {\n    const storedThoughts = JSON.parse(localStorage.getItem('thoughtsHistory')) || [];\n    setThoughtsHistory(storedThoughts);\n  }, []);\n  const handleThoughtChange = e => {\n    const inputText = e.target.value;\n    setThought(inputText);\n\n    // Calculate the background color based on input length\n    const inputLength = inputText.length;\n    const maxLength = 800;\n    const colorValue = Math.min(255, Math.floor(inputLength / maxLength * 255));\n    const newBackgroundColor = `rgb(${169 + colorValue}, ${169 + colorValue}, ${169 - colorValue})`;\n    setBackgroundColor(newBackgroundColor);\n  };\n  const handleThoughtSubmit = e => {\n    e.preventDefault();\n    if (thought.trim() === '') {\n      setWarningMessage('Please enter a thought before letting it go.');\n      return;\n    }\n\n    // Save the thought to localStorage\n    const updatedThoughtsHistory = [...thoughtsHistory, thought];\n    setThoughtsHistory(updatedThoughtsHistory);\n    localStorage.setItem('thoughtsHistory', JSON.stringify(updatedThoughtsHistory));\n\n    // Clear the input, reset the background, and trigger the explosion animation\n    setWarningMessage('');\n    setExplosion(true);\n    setTimeout(() => {\n      setExplosion(false);\n      setThought('');\n      setBackgroundColor('rgb(169, 169, 169)');\n\n      // Display a motivational message after the explosion\n      const messages = [\"You're stronger than you think.\", \"Letting go is the first step to peace.\", \"You deserve happiness.\", \"Every end is a new beginning.\", \"Stay positive, better days are ahead.\"];\n      setMotivationalMessage(messages[Math.floor(Math.random() * messages.length)]);\n    }, 1500); // Duration of the explosion animation\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thoughts-villa\",\n    style: {\n      backgroundColor: backgroundColor\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: `title ${explosion ? 'hide' : ''}`,\n      children: \"Thoughts Villa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleThoughtSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: thought,\n        onChange: handleThoughtChange,\n        placeholder: \"Type your thoughts here...\",\n        className: `thought-input ${explosion ? 'move-down shoot-up explode' : ''}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), warningMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"warning-message\",\n        children: warningMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: `submit-button ${explosion ? 'explode-button' : ''}`,\n        children: \"let it go\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), motivationalMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"motivational-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: motivationalMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.href = '/',\n        children: \"Go back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thoughts-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Thought Backlog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: thoughtsHistory.map((t, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: t\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(ThoughtsVilla, \"JCvlpMRG+a0sqXVY6ykmLYxM8DQ=\");\n_c = ThoughtsVilla;\nexport default ThoughtsVilla;\nvar _c;\n$RefreshReg$(_c, \"ThoughtsVilla\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ThoughtsVilla","_s","thought","setThought","backgroundColor","setBackgroundColor","explosion","setExplosion","warningMessage","setWarningMessage","motivationalMessage","setMotivationalMessage","thoughtsHistory","setThoughtsHistory","storedThoughts","JSON","parse","localStorage","getItem","handleThoughtChange","e","inputText","target","value","inputLength","length","maxLength","colorValue","Math","min","floor","newBackgroundColor","handleThoughtSubmit","preventDefault","trim","updatedThoughtsHistory","setItem","stringify","setTimeout","messages","random","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","placeholder","type","onClick","window","location","href","map","t","index","_c","$RefreshReg$"],"sources":["/Users/johndoe/ZEN/FRONTEND/src/components/ThoughtsVilla.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './ThoughtsVilla.css';\n\nfunction ThoughtsVilla() {\n  const [thought, setThought] = useState('');\n  const [backgroundColor, setBackgroundColor] = useState('rgb(169, 169, 169)');\n  const [explosion, setExplosion] = useState(false);\n  const [warningMessage, setWarningMessage] = useState('');\n  const [motivationalMessage, setMotivationalMessage] = useState('');\n  const [thoughtsHistory, setThoughtsHistory] = useState([]);\n\n  // Load existing thoughts from localStorage when the component mounts\n  useEffect(() => {\n    const storedThoughts = JSON.parse(localStorage.getItem('thoughtsHistory')) || [];\n    setThoughtsHistory(storedThoughts);\n  }, []);\n\n  const handleThoughtChange = (e) => {\n    const inputText = e.target.value;\n    setThought(inputText);\n\n    // Calculate the background color based on input length\n    const inputLength = inputText.length;\n    const maxLength = 800;\n    const colorValue = Math.min(255, Math.floor((inputLength / maxLength) * 255));\n\n    const newBackgroundColor = `rgb(${169 + colorValue}, ${169 + colorValue}, ${169 - colorValue})`;\n    setBackgroundColor(newBackgroundColor);\n  };\n\n  const handleThoughtSubmit = (e) => {\n    e.preventDefault();\n\n    if (thought.trim() === '') {\n      setWarningMessage('Please enter a thought before letting it go.');\n      return;\n    }\n\n    // Save the thought to localStorage\n    const updatedThoughtsHistory = [...thoughtsHistory, thought];\n    setThoughtsHistory(updatedThoughtsHistory);\n    localStorage.setItem('thoughtsHistory', JSON.stringify(updatedThoughtsHistory));\n\n    // Clear the input, reset the background, and trigger the explosion animation\n    setWarningMessage('');\n    setExplosion(true);\n    setTimeout(() => {\n      setExplosion(false);\n      setThought('');\n      setBackgroundColor('rgb(169, 169, 169)');\n\n      // Display a motivational message after the explosion\n      const messages = [\n        \"You're stronger than you think.\",\n        \"Letting go is the first step to peace.\",\n        \"You deserve happiness.\",\n        \"Every end is a new beginning.\",\n        \"Stay positive, better days are ahead.\"\n      ];\n      setMotivationalMessage(messages[Math.floor(Math.random() * messages.length)]);\n    }, 1500); // Duration of the explosion animation\n  };\n\n  return (\n    <div className=\"thoughts-villa\" style={{ backgroundColor: backgroundColor }}>\n      <h1 className={`title ${explosion ? 'hide' : ''}`}>Thoughts Villa</h1>\n      <form onSubmit={handleThoughtSubmit}>\n        <textarea\n          value={thought}\n          onChange={handleThoughtChange}\n          placeholder=\"Type your thoughts here...\"\n          className={`thought-input ${explosion ? 'move-down shoot-up explode' : ''}`}\n        ></textarea>\n        {warningMessage && <p className=\"warning-message\">{warningMessage}</p>}\n        <button\n          type=\"submit\"\n          className={`submit-button ${explosion ? 'explode-button' : ''}`}\n        >\n          let it go\n        </button>\n      </form>\n      {motivationalMessage && (\n        <div className=\"motivational-message\">\n          <p>{motivationalMessage}</p>\n          <button onClick={() => window.location.href = '/'}>Go back to Home</button>\n        </div>\n      )}\n      <div className=\"thoughts-history\">\n        <h2>Your Thought Backlog</h2>\n        <ul>\n          {thoughtsHistory.map((t, index) => (\n            <li key={index}>{t}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default ThoughtsVilla;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}