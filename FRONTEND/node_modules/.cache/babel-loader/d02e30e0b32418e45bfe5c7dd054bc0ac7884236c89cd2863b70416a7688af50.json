{"ast":null,"code":"var _jsxFileName = \"/Users/johndoe/ZEN/FRONTEND/src/components/Garden.js\";\nimport React from 'react';\nimport './Garden.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Garden({\n  plants,\n  moodMessage\n}) {\n  const radius = 60; // Adjusted for new circle size\n  const angleStep = 2 * Math.PI / 5; // Circle of 5 emojis\n\n  const emotions = {\n    '🌻': 'Happy',\n    '🌵': 'Sad',\n    '🌺': 'Angry',\n    '🍀': 'Relaxed'\n  };\n  const calculatePosition = index => {\n    const circleIndex = Math.floor(index / 5); // Determines which circle the emoji is in\n    const positionInCircle = index % 5; // Position within the current circle\n\n    const angle = positionInCircle * angleStep;\n    const x = radius * Math.cos(angle) + radius;\n    const y = radius * Math.sin(angle) + radius;\n    const circleOffset = circleIndex * (radius * 2 + 20); // Adjust spacing between circles\n    return {\n      left: `${x + circleOffset}px`,\n      top: `${y}px`\n    };\n  };\n  const circleCount = Math.ceil(plants.length / 5); // Number of circles needed\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"garden\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"garden-plants-container\",\n      children: Array.from({\n        length: circleCount\n      }).map((_, circleIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"circle\",\n        children: plants.slice(circleIndex * 5, (circleIndex + 1) * 5).map((plant, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"garden-plant\",\n          style: calculatePosition(circleIndex * 5 + index),\n          children: [plant, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tooltip\",\n            children: emotions[plant]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 37\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 33\n        }, this))\n      }, circleIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"garden-mood-message\",\n      children: moodMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        className: \"garden-link\",\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n_c = Garden;\nexport default Garden;\nvar _c;\n$RefreshReg$(_c, \"Garden\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Garden","plants","moodMessage","radius","angleStep","Math","PI","emotions","calculatePosition","index","circleIndex","floor","positionInCircle","angle","x","cos","y","sin","circleOffset","left","top","circleCount","ceil","length","className","children","Array","from","map","_","slice","plant","style","fileName","_jsxFileName","lineNumber","columnNumber","href","_c","$RefreshReg$"],"sources":["/Users/johndoe/ZEN/FRONTEND/src/components/Garden.js"],"sourcesContent":["import React from 'react';\nimport './Garden.css';\n\nfunction Garden({ plants, moodMessage }) {\n    const radius = 60; // Adjusted for new circle size\n    const angleStep = (2 * Math.PI) / 5; // Circle of 5 emojis\n\n    const emotions = {\n        '🌻': 'Happy',\n        '🌵': 'Sad',\n        '🌺': 'Angry',\n        '🍀': 'Relaxed'\n    };\n\n    const calculatePosition = (index) => {\n        const circleIndex = Math.floor(index / 5); // Determines which circle the emoji is in\n        const positionInCircle = index % 5; // Position within the current circle\n\n        const angle = positionInCircle * angleStep;\n        const x = radius * Math.cos(angle) + radius;\n        const y = radius * Math.sin(angle) + radius;\n\n        const circleOffset = circleIndex * (radius * 2 + 20); // Adjust spacing between circles\n        return { left: `${x + circleOffset}px`, top: `${y}px` };\n    };\n\n    const circleCount = Math.ceil(plants.length / 5); // Number of circles needed\n\n    return (\n        <div className=\"garden\">\n            <div className=\"garden-plants-container\">\n                {Array.from({ length: circleCount }).map((_, circleIndex) => (\n                    <div key={circleIndex} className=\"circle\">\n                        {plants\n                            .slice(circleIndex * 5, (circleIndex + 1) * 5)\n                            .map((plant, index) => (\n                                <span\n                                    key={index}\n                                    className=\"garden-plant\"\n                                    style={calculatePosition(circleIndex * 5 + index)}\n                                >\n                                    {plant}\n                                    <div className=\"tooltip\">{emotions[plant]}</div>\n                                </span>\n                            ))}\n                    </div>\n                ))}\n            </div>\n            <p className=\"garden-mood-message\">{moodMessage}</p>\n            <p>\n                <a href=\"/\" className=\"garden-link\">Back to Home</a>\n            </p>\n        </div>\n    );\n}\n\nexport default Garden;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}